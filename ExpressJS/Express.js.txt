Express.js
----------
***********************************************************************************************************************************************************************
**********************************************************************************
npm install -g express 
**********************************************************************************
npm install express --save
//handling JSON, Raw, Text and URL encoded form data
npm install body-parser --save
//parse Cookie header and populate req.cookies
npm install cookie-parser --save 
//handling multipart/form-data
npm install multer --save

npm install morgan
npm install pg
npm install express-session

npm install password-reset
npm init
npm install nodemailer@0.7.1
npm install express-fileupload
**********************************************************************************
node filename.js
http://127.0.0.1:8000
**********************************************************************************
var express = require('express');  
var app = express();  
app.get('/', function (req, res) {  
   res.send('Welcome to Express');  
})  
var server = app.listen(8000, function () {  
var host = server.address().address  
  var port = server.address().port  
 console.log("Example app listening at http://%s:%s", host, port)  
}) 
**********************************************************************************
//Request Object
app.get('/', function (req, res) {  
   // --  
})
**********************************************************************************
npm install pg

var pg = require('pg');
// create a config to configure both pooling behavior 
// and client options 
// note: all config is optional and the environment variables 
// will be read if the config is not present 
var config = {
  user: 'foo', //env var: PGUSER 
  database: 'my_db', //env var: PGDATABASE 
  password: 'secret', //env var: PGPASSWORD 
  port: 5432, //env var: PGPORT 
  max: 10, // max number of clients in the pool 
  idleTimeoutMillis: 30000, // how long a client is allowed to remain idle before being closed 
};
 
 
//this initializes a connection pool 
//it will keep idle connections open for a 30 seconds 
//and set a limit of maximum 10 idle clients 
var pool = new pg.Pool(config);
 
// to run a query we can acquire a client from the pool, 
// run a query on the client, and then return the client to the pool 
pool.connect(function(err, client, done) {
  if(err) {
    return console.error('error fetching client from pool', err);
  }
  client.query('SELECT $1::int AS number', ['1'], function(err, result) {
    //call `done()` to release the client back to the pool 
    done();
 
    if(err) {
      return console.error('error running query', err);
    }
    console.log(result.rows[0].number);
    //output: 1 
  });
});
 
pool.on('error', function (err, client) {
  // if an error is encountered by a client while it sits idle in the pool 
  // the pool itself will emit an error event with both the error and 
  // the client which emitted the original error 
  // this is a rare occurrence but can happen if there is a network partition 
  // between your application and the database, the database restarts, etc. 
  // and so you might want to handle it and at least log it out 
  console.error('idle client error', err.message, err.stack)
})
**********************************************************************************
npm install mysql

var mysql      = require('mysql');
var connection = mysql.createConnection({
  host     : 'localhost',
  user     : 'me',
  password : 'secret',
  database : 'my_db'
});
 
connection.connect();
 
connection.query('SELECT 1 + 1 AS solution', function(err, rows, fields) {
  if (err) throw err;
 
  console.log('The solution is: ', rows[0].solution);
});
 
connection.end();
**********************************************************************************
***********************************************************************************************************************************************************************
